/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reclamation as PrismaReclamation } from "@prisma/client";

export class ReclamationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReclamationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reclamation.count(args);
  }

  async reclamations<T extends Prisma.ReclamationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclamationFindManyArgs>
  ): Promise<PrismaReclamation[]> {
    return this.prisma.reclamation.findMany<Prisma.ReclamationFindManyArgs>(
      args
    );
  }
  async reclamation<T extends Prisma.ReclamationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclamationFindUniqueArgs>
  ): Promise<PrismaReclamation | null> {
    return this.prisma.reclamation.findUnique(args);
  }
  async createReclamation<T extends Prisma.ReclamationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclamationCreateArgs>
  ): Promise<PrismaReclamation> {
    return this.prisma.reclamation.create<T>(args);
  }
  async updateReclamation<T extends Prisma.ReclamationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclamationUpdateArgs>
  ): Promise<PrismaReclamation> {
    return this.prisma.reclamation.update<T>(args);
  }
  async deleteReclamation<T extends Prisma.ReclamationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReclamationDeleteArgs>
  ): Promise<PrismaReclamation> {
    return this.prisma.reclamation.delete(args);
  }
}
