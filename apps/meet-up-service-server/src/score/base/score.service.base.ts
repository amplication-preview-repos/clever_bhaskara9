/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Score as PrismaScore } from "@prisma/client";

export class ScoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ScoreCountArgs, "select">): Promise<number> {
    return this.prisma.score.count(args);
  }

  async scores<T extends Prisma.ScoreFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreFindManyArgs>
  ): Promise<PrismaScore[]> {
    return this.prisma.score.findMany<Prisma.ScoreFindManyArgs>(args);
  }
  async score<T extends Prisma.ScoreFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreFindUniqueArgs>
  ): Promise<PrismaScore | null> {
    return this.prisma.score.findUnique(args);
  }
  async createScore<T extends Prisma.ScoreCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreCreateArgs>
  ): Promise<PrismaScore> {
    return this.prisma.score.create<T>(args);
  }
  async updateScore<T extends Prisma.ScoreUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreUpdateArgs>
  ): Promise<PrismaScore> {
    return this.prisma.score.update<T>(args);
  }
  async deleteScore<T extends Prisma.ScoreDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreDeleteArgs>
  ): Promise<PrismaScore> {
    return this.prisma.score.delete(args);
  }
}
