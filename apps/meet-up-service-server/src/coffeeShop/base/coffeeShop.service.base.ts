/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CoffeeShop as PrismaCoffeeShop } from "@prisma/client";

export class CoffeeShopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CoffeeShopCountArgs, "select">
  ): Promise<number> {
    return this.prisma.coffeeShop.count(args);
  }

  async coffeeShops<T extends Prisma.CoffeeShopFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoffeeShopFindManyArgs>
  ): Promise<PrismaCoffeeShop[]> {
    return this.prisma.coffeeShop.findMany<Prisma.CoffeeShopFindManyArgs>(args);
  }
  async coffeeShop<T extends Prisma.CoffeeShopFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoffeeShopFindUniqueArgs>
  ): Promise<PrismaCoffeeShop | null> {
    return this.prisma.coffeeShop.findUnique(args);
  }
  async createCoffeeShop<T extends Prisma.CoffeeShopCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoffeeShopCreateArgs>
  ): Promise<PrismaCoffeeShop> {
    return this.prisma.coffeeShop.create<T>(args);
  }
  async updateCoffeeShop<T extends Prisma.CoffeeShopUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoffeeShopUpdateArgs>
  ): Promise<PrismaCoffeeShop> {
    return this.prisma.coffeeShop.update<T>(args);
  }
  async deleteCoffeeShop<T extends Prisma.CoffeeShopDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoffeeShopDeleteArgs>
  ): Promise<PrismaCoffeeShop> {
    return this.prisma.coffeeShop.delete(args);
  }
}
