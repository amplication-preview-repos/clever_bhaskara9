/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoffeeShopService } from "../coffeeShop.service";
import { CoffeeShopCreateInput } from "./CoffeeShopCreateInput";
import { CoffeeShop } from "./CoffeeShop";
import { Post } from "../../post/base/Post";
import { Request } from "../../request/base/Request";
import { CoffeeShopFindManyArgs } from "./CoffeeShopFindManyArgs";
import { CoffeeShopWhereUniqueInput } from "./CoffeeShopWhereUniqueInput";
import { CoffeeShopUpdateInput } from "./CoffeeShopUpdateInput";

export class CoffeeShopControllerBase {
  constructor(protected readonly service: CoffeeShopService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CoffeeShop })
  async createCoffeeShop(
    @common.Body() data: CoffeeShopCreateInput
  ): Promise<CoffeeShop> {
    return await this.service.createCoffeeShop({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CoffeeShop] })
  @ApiNestedQuery(CoffeeShopFindManyArgs)
  async coffeeShops(@common.Req() request: Request): Promise<CoffeeShop[]> {
    const args = plainToClass(CoffeeShopFindManyArgs, request.query);
    return this.service.coffeeShops({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CoffeeShop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coffeeShop(
    @common.Param() params: CoffeeShopWhereUniqueInput
  ): Promise<CoffeeShop | null> {
    const result = await this.service.coffeeShop({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CoffeeShop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoffeeShop(
    @common.Param() params: CoffeeShopWhereUniqueInput,
    @common.Body() data: CoffeeShopUpdateInput
  ): Promise<CoffeeShop | null> {
    try {
      return await this.service.updateCoffeeShop({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CoffeeShop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoffeeShop(
    @common.Param() params: CoffeeShopWhereUniqueInput
  ): Promise<CoffeeShop | null> {
    try {
      return await this.service.deleteCoffeeShop({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
